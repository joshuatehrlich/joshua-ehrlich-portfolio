---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';

import CardDemo from '../components/ui/card-demo.tsx';


// SETUP IMAGE IMPORTS
const categories = ["path", "name", "details", "width", "vpos"] as const;

const imgData = [
  ["giant", "Giant", "...", 3],["balloon", "Escape", "..."],
  ["desert", "Alice Abandoned", "...", 2, "60%"],["alice", "Alice Redesign", "..."],

	["siftmask", "Sift", "..."],["siftgun", "Sift", "...", 3, "0%"],
	["eye", "Untitled", "...", 2],[null],

	["camp", "Sift", "..."],["carride", "Sift", "..."],[null],
];

type Image = {
  path: string;
  name: string;
  details: string;
  width: number;
  vpos: string;
};

const defaultWidth = 1;  // Default width
const defaultVPos = "50%"; // Default vertical position

const imgs: Image[] = imgData.map(data => {
  const image = {
    path: data[0] as string,
    name: data[1] as string,
    details: data[2] as string, // Details provided in imgData
    width: (data[3] !== undefined ? data[3] : defaultWidth) as number,
    vpos: (data[4] !== undefined ? data[4] : defaultVPos) as string,
  } as Image;

  return image;
});
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />

		<div class="parallax-viewport">
			<div class="parallax-content">
				<h3 class="parallax-text-elements">View my work below</h1>
				<p class="parallax-text-elements">click on any image for details</p>
			</div>
		</div>

		<div class="gallery-group">
			{imgs.reduce((acc, img, index) => {
				acc = acc as { path: string, width: number, name: string, vpos: string }[][];
				
				// Start a new flexbox for every 4 images
				if (index % 4 === 0 || img.path === null) {
					acc.push([]);
				}
				acc[acc.length - 1].push(img);
				return acc;
			}, [] as { path: string, width: number, name: string, vpos: string }[][])
			.map((imgGroup, groupIndex) => ( imgGroup.length > 1 && (
				<div class="gallery">
					{imgGroup.map((img, imgIndex) => (
						<div class="stretchy-bg" style={{
							backgroundImage: `url(/illustration/${img.path}.jpg)`,
							'--flex-grow': `${img.width}`,
							backgroundPosition: `50% ${img.vpos}`
						}}>
							<div class="stretchy-container">
								<h3 class="stretchy-text">{img.name}</h3>
							</div>
						</div>
					))}
				</div>
			)))}
			
			
			
  </div>

		</div>

		<!-- <CardDemo client:load /> -->

		<Footer />
	</body>
</html>

<style>

.gallery-group {
	display: flex;
	flex-direction: column;
	width: 100%;
	margin: 5vw 0px 100px 0px;
  row-gap: 10px;
}

.gallery {
	display: flex;
	margin: 0px auto 0px auto;
	column-gap: 10px;
	row-gap: 10px;
	width: 90%;
	justify-content: center;
	align-items: center;
	align-content: stretch;
	flex-wrap: wrap;
}
.stretchy-bg {
	height: 20vw;
	margin: 0;
	padding: 0;
	border-radius: 2px;
	
	flex-shrink:2;
	flex-basis: 0;
	min-width: 0;
	transition: 600ms;

	background-size: cover;
	background-position: center;
	
	flex-grow: var(--flex-grow);
}

@media (max-width: 1080px) {
.stretchy-bg {
	flex-basis: 34%;
	height: 20vh;
}} @media (max-width: 720px) {
.stretchy-bg {
	/* flex-basis: 100%; */
	height: 15vh;
}}

.stretchy-bg:hover {
	flex-grow: calc(var(--flex-grow) + 0.5) !important;
}
.stretchy-container {
	width: 100%;
	height: 100%;
	/* background-color: rgba(255,255,255,0); */
	opacity: 0;
	background: linear-gradient(
		to top,
		rgba(255, 255, 255, 0.783),
		rgba(255, 255, 255, 0) 100%
		);
	transition: 350ms;
	
	display: flex;
	justify-content: flex-start;
	align-items: flex-end;
}
.stretchy-text {
	color: rgba(56, 56, 56, 0.836);
	transition: 150ms;
	text-align: center;
	white-space: nowrap;
	opacity: 0;
	transition: 250ms;
	font-size: 1.4em;
	margin: 0px 0px 20px 30px;
}
.stretchy-container:hover {
	/* background-color: rgba(255, 255, 255, 0.718); */
	opacity: 1;
}
.stretchy-container:hover .stretchy-text {
	opacity: 1;
}

/* -------------------- PARALLAX -------------------- */

/* viewport */
.parallax-viewport {
	margin: 30px 0px 0px 0px;
	position: relative;
	
  height: 30vw;
  z-index: 0;
	
	background-image: url('/illustration/forest.png');
	background-size: 120%;
  animation: parallaxScroll linear forwards;
	animation-fill-mode: both;
	animation-duration: 1ms;
  animation-timeline: view();
	animation-range-start: contain 70%;
	animation-range-end: cover;

	background-position: 50% 70%;
}
@media (min-width: 730px) { @keyframes parallaxScroll {
	to {
    background-position: 50% 0%;
  }
}}

.parallax-content{
	width: 100%;
	height: 100%;
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	animation: parallaxScrollSlow linear forwards;
  animation-timeline: view();
	animation-range-start: contain 90%;
	animation-range-end: cover;
}
@media (min-width: 730px) { @keyframes parallaxScrollSlow {
	from {
		opacity: 1;
	}
  to {
    transform: translateY(200px);
		opacity: 0;
  }
}}

/* text */
.parallax-text-elements {
	color: white;
	margin: 0;
	padding: 0;
	
}
.parallax-viewport p {
	font-size: 24px;
}


@media (max-width: 720px) {
.parallax-layer {
}
.parallax-viewport {
	height: 50vw;
}
}

</style>